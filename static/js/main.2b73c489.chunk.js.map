{"version":3,"sources":["components/Statistics.js","components/FeedbackOptions.js","components/Section.js","components/Notification.js","components/Feedback.js","App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","prototype","PropTypes","number","isRequired","countPositive","FeedbackOptions","options","onLeaveFeedback","map","item","type","key","name","onClick","Section","title","children","Notification","message","Feedback","state","leaveFeedback","event","value","target","setState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Object","keys","Component","defaultProps","App","ReactDOM","render","document","getElementById"],"mappings":"2OAGMA,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,oCACE,0CACA,4BACE,qCAAWJ,GACX,wCAAcC,GACd,oCAAUC,GACV,sCAAYC,GACZ,kDAAwBC,EAAxB,QAKNL,EAAWM,UAAY,CACrBL,KAAMM,IAAUC,OAAOC,WACvBP,QAASK,IAAUC,OAAOC,WAC1BN,IAAKI,IAAUC,OAAOC,WACtBL,MAAOG,IAAUC,OAAOC,WACxBC,cAAeH,IAAUC,OAAOC,YAGnBT,QCNAW,EAfS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,oCACGD,EAAQE,KAAI,SAAAC,GAAI,OACf,4BAAQC,KAAK,SAASC,IAAKF,EAAMG,KAAMH,EAAMI,QAASN,GACnDE,QCOMK,EAXC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACE,4BAAKD,GACJC,ICMUC,EATM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACnB,oCACE,2BAAIA,KCCaC,E,4MAKnBC,MAAQ,CACNzB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPwB,cAAgB,SAAAC,GACd,IAAMC,EAAQD,EAAME,OAAOZ,KAC3B,EAAKa,UAAS,SAAAL,GAAK,sBAChBG,EAAQH,EAAMG,GAAS,O,EAI5BG,mBAAqB,WACnB,OAAO,EAAKN,MAAMzB,KAAO,EAAKyB,MAAMxB,QAAU,EAAKwB,MAAMvB,K,EAE3D8B,gCAAkC,WAChC,OAAOC,KAAKC,MAAO,EAAKT,MAAMzB,KAAO,EAAK+B,qBAAwB,M,uDAE1D,IACA/B,EAASmC,KAAKV,MAAdzB,KACAC,EAAYkC,KAAKV,MAAjBxB,QACAC,EAAQiC,KAAKV,MAAbvB,IACR,OACE,6BACE,kBAAC,EAAD,CAASkB,MAAO,yBACd,kBAAC,EAAD,CACET,QAASyB,OAAOC,KAAKF,KAAKV,OAC1Bb,gBAAiBuB,KAAKT,iBAIzBS,KAAKJ,qBACJ,kBAAC,EAAD,CACE/B,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOgC,KAAKJ,qBACZ3B,mBAAoB+B,KAAKH,oCAG3B,kBAAC,EAAD,CAAcT,QAAQ,2B,GA9CMe,aAAjBd,EACZe,aAAe,GCJxB,IAMeC,EANH,kBACV,oCACE,kBAAC,EAAD,QCDJC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.2b73c489.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <>\r\n    <h2>Statistics</h2>\r\n    <ul>\r\n      <li>Good: {good}</li>\r\n      <li>Neutral: {neutral}</li>\r\n      <li>Bad: {bad}</li>\r\n      <li>Total: {total}</li>\r\n      <li>Positive feedback: {positivePercentage}%</li>\r\n    </ul>\r\n  </>\r\n);\r\n\r\nStatistics.prototype = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  countPositive: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\r\n  <>\r\n    {options.map(item => (\r\n      <button type=\"button\" key={item} name={item} onClick={onLeaveFeedback}>\r\n        {item}\r\n      </button>\r\n    ))}\r\n  </>\r\n);\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.array.isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => (\r\n  <>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.object.isRequired,\r\n};\r\nexport default Section;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => (\r\n  <>\r\n    <p>{message}</p>\r\n  </>\r\n);\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\nexport default Notification;\r\n","import React, { Component } from 'react';\r\nimport Statistics from './Statistics';\r\nimport FeedbackOptions from './FeedbackOptions';\r\nimport Section from './Section';\r\nimport Notification from './Notification';\r\n\r\nexport default class Feedback extends Component {\r\n  static defaultProps = {};\r\n\r\n  static propTypes = {};\r\n\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  leaveFeedback = event => {\r\n    const value = event.target.name;\r\n    this.setState(state => ({\r\n      [value]: state[value] + 1,\r\n    }));\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    return this.state.good + this.state.neutral + this.state.bad;\r\n  };\r\n  countPositiveFeedbackPercentage = () => {\r\n    return Math.round((this.state.good / this.countTotalFeedback()) * 100);\r\n  };\r\n  render() {\r\n    const { good } = this.state;\r\n    const { neutral } = this.state;\r\n    const { bad } = this.state;\r\n    return (\r\n      <div>\r\n        <Section title={'Please leave feedback'}>\r\n          <FeedbackOptions\r\n            options={Object.keys(this.state)}\r\n            onLeaveFeedback={this.leaveFeedback}\r\n          />\r\n        </Section>\r\n\r\n        {this.countTotalFeedback() ? (\r\n          <Statistics\r\n            good={good}\r\n            neutral={neutral}\r\n            bad={bad}\r\n            total={this.countTotalFeedback()}\r\n            positivePercentage={this.countPositiveFeedbackPercentage()}\r\n          />\r\n        ) : (\r\n          <Notification message=\"No feedback given\" />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport Feedback from './components/Feedback';\n\nconst App = () => (\n  <>\n    <Feedback />\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}